name: .NET Core CI

on:
  push:
    paths-ignore:
      - '.github/*'
      - '.github/*_TEMPLATE/**'
      - '*.md'
  pull_request:
    paths-ignore:
      - '.github/*'
      - '.github/*_TEMPLATE/**'
      - '*.md'
  workflow_dispatch:

jobs:
  build:
    name: .NET on ${{ matrix.runs-on }} (${{ matrix.configuration }})
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        runs-on: [macos-latest, macos-14, ubuntu-latest, windows-latest]
        configuration: [Release, Debug]
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    steps:
      - uses: actions/checkout@v5

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v5

      - name: Build
        run: dotnet publish DepotDownloader/DepotDownloader.csproj -c ${{ matrix.configuration }} -o artifacts /p:ContinuousIntegrationBuild=true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: matrix.configuration == 'Release' && matrix.runs-on == 'windows-latest'
        with:
          name: DepotDownloader-framework
          path: artifacts
          if-no-files-found: error

      - name: Publish Windows-x64
        if: matrix.configuration == 'Release' && matrix.runs-on == 'windows-latest'
        run: dotnet publish DepotDownloader/DepotDownloader.csproj --configuration Release -p:PublishSingleFile=true -p:DebugType=embedded --self-contained --runtime win-x64 --output selfcontained-win-x64

      - name: Publish Windows-arm64
        if: matrix.configuration == 'Release' && matrix.runs-on == 'windows-latest'
        run: dotnet publish DepotDownloader/DepotDownloader.csproj --configuration Release -p:PublishSingleFile=true -p:DebugType=embedded --self-contained --runtime win-arm64 --output selfcontained-win-arm64

      - name: Publish Linux-x64
        if: matrix.configuration == 'Release' && matrix.runs-on == 'ubuntu-latest'
        run: dotnet publish DepotDownloader/DepotDownloader.csproj --configuration Release -p:PublishSingleFile=true -p:DebugType=embedded --self-contained --runtime linux-x64 --output selfcontained-linux-x64

      - name: Publish Linux-arm
        if: matrix.configuration == 'Release' && matrix.runs-on == 'ubuntu-latest'
        run: dotnet publish DepotDownloader/DepotDownloader.csproj --configuration Release -p:PublishSingleFile=true -p:DebugType=embedded --self-contained --runtime linux-arm --output selfcontained-linux-arm

      - name: Publish Linux-arm64
        if: matrix.configuration == 'Release' && matrix.runs-on == 'ubuntu-latest'
        run: dotnet publish DepotDownloader/DepotDownloader.csproj --configuration Release -p:PublishSingleFile=true -p:DebugType=embedded --self-contained --runtime linux-arm64 --output selfcontained-linux-arm64

      - name: Publish NixOS-x64
        if: matrix.configuration == 'Release' && matrix.runs-on == 'ubuntu-latest'
        run: |
          # Build the standard Linux binary first
          dotnet publish DepotDownloader/DepotDownloader.csproj --configuration Release -p:PublishSingleFile=true -p:DebugType=embedded -p:PublishReadyToRun=false --self-contained --runtime linux-x64 --output selfcontained-nixos-x64-temp
          
          # Install patchelf for ELF patching
          sudo apt-get update && sudo apt-get install -y patchelf
          
          # Copy the binary to final directory
          mkdir -p selfcontained-nixos-x64
          cp selfcontained-nixos-x64-temp/DepotDownloader selfcontained-nixos-x64/
          
          # Patch the ELF binary for NixOS compatibility
          # Set the interpreter to a common NixOS path and add typical NixOS library paths
          patchelf --set-interpreter /run/current-system/sw/lib/ld-linux-x86-64.so.2 selfcontained-nixos-x64/DepotDownloader || true
          patchelf --set-rpath '/run/current-system/sw/lib:/nix/store/*/lib' selfcontained-nixos-x64/DepotDownloader || true
          
          # Create a NixOS-compatible wrapper script
          cat > selfcontained-nixos-x64/DepotDownloader-nixos << 'EOF'
          #!/usr/bin/env bash
          # NixOS compatibility wrapper for DepotDownloader
          
          # Try to find the NixOS dynamic linker
          if [ -f "/run/current-system/sw/lib/ld-linux-x86-64.so.2" ]; then
              INTERP="/run/current-system/sw/lib/ld-linux-x86-64.so.2"
          elif [ -f "/lib64/ld-linux-x86-64.so.2" ]; then
              INTERP="/lib64/ld-linux-x86-64.so.2"
          else
              # Fallback: try to use patchelf if available
              if command -v patchelf >/dev/null 2>&1; then
                  echo "Attempting to patch DepotDownloader for NixOS compatibility..."
                  patchelf --set-interpreter "$(cat /proc/sys/kernel/osrelease | grep -q nixos && echo '/run/current-system/sw/lib/ld-linux-x86-64.so.2' || echo '/lib64/ld-linux-x86-64.so.2')" "$0/../DepotDownloader" 2>/dev/null || true
              fi
              # Try direct execution
              exec "$(dirname "$0")/DepotDownloader" "$@"
          fi
          
          # Execute with explicit interpreter
          exec "$INTERP" "$(dirname "$0")/DepotDownloader" "$@"
          EOF
          
          chmod +x selfcontained-nixos-x64/DepotDownloader-nixos
          
          # Create README for NixOS users
          cat > selfcontained-nixos-x64/README-NixOS.md << 'EOF'
          # DepotDownloader for NixOS
          
          This build has been specifically prepared for NixOS compatibility.
          
          ## Usage Options:
          
          1. **Use the wrapper script (Recommended):**
             ```bash
             ./DepotDownloader-nixos [arguments]
             ```
          
          2. **Use with nix-shell:**
             ```bash
             nix-shell -p glibc --run './DepotDownloader [arguments]'
             ```
          
          3. **Use with steam-run (if you have Steam installed):**
             ```bash
             steam-run ./DepotDownloader [arguments]
             ```
          
          4. **Install in a NixOS environment:**
             Add to your NixOS configuration or use nix-env:
             ```bash
             nix-shell -p glibc stdenv.cc.cc.lib --run './DepotDownloader [arguments]'
             ```
          
          ## Troubleshooting:
          
          If you still get dynamic linking errors, try:
          ```bash
          patchelf --set-interpreter $(nix-build '<nixpkgs>' -A glibc)/lib/ld-linux-x86-64.so.2 ./DepotDownloader
          ```
          EOF

      - name: Publish NixOS-arm64
        if: matrix.configuration == 'Release' && matrix.runs-on == 'ubuntu-latest'
        run: |
          # Build the standard Linux binary first
          dotnet publish DepotDownloader/DepotDownloader.csproj --configuration Release -p:PublishSingleFile=true -p:DebugType=embedded -p:PublishReadyToRun=false --self-contained --runtime linux-arm64 --output selfcontained-nixos-arm64-temp
          
          # Copy the binary to final directory
          mkdir -p selfcontained-nixos-arm64
          cp selfcontained-nixos-arm64-temp/DepotDownloader selfcontained-nixos-arm64/
          
          # Patch the ELF binary for NixOS compatibility (ARM64)
          patchelf --set-interpreter /run/current-system/sw/lib/ld-linux-aarch64.so.1 selfcontained-nixos-arm64/DepotDownloader || true
          patchelf --set-rpath '/run/current-system/sw/lib:/nix/store/*/lib' selfcontained-nixos-arm64/DepotDownloader || true
          
          # Create a NixOS-compatible wrapper script for ARM64
          cat > selfcontained-nixos-arm64/DepotDownloader-nixos << 'EOF'
          #!/usr/bin/env bash
          # NixOS compatibility wrapper for DepotDownloader (ARM64)
          
          # Try to find the NixOS dynamic linker
          if [ -f "/run/current-system/sw/lib/ld-linux-aarch64.so.1" ]; then
              INTERP="/run/current-system/sw/lib/ld-linux-aarch64.so.1"
          elif [ -f "/lib/ld-linux-aarch64.so.1" ]; then
              INTERP="/lib/ld-linux-aarch64.so.1"
          else
              # Fallback: try to use patchelf if available
              if command -v patchelf >/dev/null 2>&1; then
                  echo "Attempting to patch DepotDownloader for NixOS compatibility..."
                  patchelf --set-interpreter "$(cat /proc/sys/kernel/osrelease | grep -q nixos && echo '/run/current-system/sw/lib/ld-linux-aarch64.so.1' || echo '/lib/ld-linux-aarch64.so.1')" "$0/../DepotDownloader" 2>/dev/null || true
              fi
              # Try direct execution
              exec "$(dirname "$0")/DepotDownloader" "$@"
          fi
          
          # Execute with explicit interpreter
          exec "$INTERP" "$(dirname "$0")/DepotDownloader" "$@"
          EOF
          
          chmod +x selfcontained-nixos-arm64/DepotDownloader-nixos
          
          # Copy README for ARM64
          cp selfcontained-nixos-x64/README-NixOS.md selfcontained-nixos-arm64/README-NixOS.md

      - name: Publish macOS-x64
        if: matrix.configuration == 'Release' && matrix.runs-on == 'macos-latest'
        run: dotnet publish DepotDownloader/DepotDownloader.csproj --configuration Release -p:PublishSingleFile=true -p:DebugType=embedded --self-contained --runtime osx-x64 --output selfcontained-osx-x64

      - name: Publish macOS-arm64
        if: matrix.configuration == 'Release' && matrix.runs-on == 'macos-14'
        run: dotnet publish DepotDownloader/DepotDownloader.csproj --configuration Release -p:PublishSingleFile=true -p:DebugType=embedded --self-contained --runtime osx-arm64 --output selfcontained-osx-arm64

      - name: Upload Windows-x64
        uses: actions/upload-artifact@v4
        if: matrix.configuration == 'Release' && matrix.runs-on == 'windows-latest'
        with:
          name: DepotDownloader-windows-x64
          path: selfcontained-win-x64
          if-no-files-found: error

      - name: Upload Windows-arm64
        uses: actions/upload-artifact@v4
        if: matrix.configuration == 'Release' && matrix.runs-on == 'windows-latest'
        with:
          name: DepotDownloader-windows-arm64
          path: selfcontained-win-arm64
          if-no-files-found: error

      - name: Upload Linux-x64
        uses: actions/upload-artifact@v4
        if: matrix.configuration == 'Release' && matrix.runs-on == 'ubuntu-latest'
        with:
          name: DepotDownloader-linux-x64
          path: selfcontained-linux-x64
          if-no-files-found: error

      - name: Upload Linux-arm
        uses: actions/upload-artifact@v4
        if: matrix.configuration == 'Release' && matrix.runs-on == 'ubuntu-latest'
        with:
          name: DepotDownloader-linux-arm
          path: selfcontained-linux-arm
          if-no-files-found: error

      - name: Upload Linux-arm64
        uses: actions/upload-artifact@v4
        if: matrix.configuration == 'Release' && matrix.runs-on == 'ubuntu-latest'
        with:
          name: DepotDownloader-linux-arm64
          path: selfcontained-linux-arm64
          if-no-files-found: error

      - name: Upload NixOS-x64
        uses: actions/upload-artifact@v4
        if: matrix.configuration == 'Release' && matrix.runs-on == 'ubuntu-latest'
        with:
          name: DepotDownloader-nixos-x64
          path: selfcontained-nixos-x64
          if-no-files-found: error

      - name: Upload NixOS-arm64
        uses: actions/upload-artifact@v4
        if: matrix.configuration == 'Release' && matrix.runs-on == 'ubuntu-latest'
        with:
          name: DepotDownloader-nixos-arm64
          path: selfcontained-nixos-arm64
          if-no-files-found: error

      - name: Upload macOS-x64
        uses: actions/upload-artifact@v4
        if: matrix.configuration == 'Release' && matrix.runs-on == 'macos-latest'
        with:
          name: DepotDownloader-macos-x64
          path: selfcontained-osx-x64
          if-no-files-found: error

      - name: Upload macOS-arm64
        uses: actions/upload-artifact@v4
        if: matrix.configuration == 'Release' && matrix.runs-on == 'macos-14'
        with:
          name: DepotDownloader-macos-arm64
          path: selfcontained-osx-arm64
          if-no-files-found: error

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display artifacts folder structure
      run: ls -Rl
      working-directory: artifacts

    - name: Create release files
      run: |
        set -eux
        mkdir release
        chmod +x artifacts/DepotDownloader-linux-x64/DepotDownloader
        chmod +x artifacts/DepotDownloader-linux-arm/DepotDownloader
        chmod +x artifacts/DepotDownloader-linux-arm64/DepotDownloader
        chmod +x artifacts/DepotDownloader-nixos-x64/DepotDownloader
        chmod +x artifacts/DepotDownloader-nixos-x64/DepotDownloader-nixos
        chmod +x artifacts/DepotDownloader-nixos-arm64/DepotDownloader
        chmod +x artifacts/DepotDownloader-nixos-arm64/DepotDownloader-nixos
        chmod +x artifacts/DepotDownloader-macos-x64/DepotDownloader
        chmod +x artifacts/DepotDownloader-macos-arm64/DepotDownloader
        zip -9j release/DepotDownloader-framework.zip artifacts/DepotDownloader-framework/*
        zip -9j release/DepotDownloader-windows-x64.zip artifacts/DepotDownloader-windows-x64/*
        zip -9j release/DepotDownloader-windows-arm64.zip artifacts/DepotDownloader-windows-arm64/*
        zip -9j release/DepotDownloader-linux-x64.zip artifacts/DepotDownloader-linux-x64/*
        zip -9j release/DepotDownloader-linux-arm.zip artifacts/DepotDownloader-linux-arm/*
        zip -9j release/DepotDownloader-linux-arm64.zip artifacts/DepotDownloader-linux-arm64/*
        zip -9r release/DepotDownloader-nixos-x64.zip artifacts/DepotDownloader-nixos-x64/*
        zip -9r release/DepotDownloader-nixos-arm64.zip artifacts/DepotDownloader-nixos-arm64/*
        zip -9j release/DepotDownloader-macos-x64.zip artifacts/DepotDownloader-macos-x64/*
        zip -9j release/DepotDownloader-macos-arm64.zip artifacts/DepotDownloader-macos-arm64/*

    - name: Display structure of archived files
      run: ls -Rl
      working-directory: release

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        draft: true
        files: release/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
