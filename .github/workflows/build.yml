name: .NET Core CI

on:
  push:
    paths-ignore:
      - '.github/*'
      - '.github/*_TEMPLATE/**'
      - '*.md'
  pull_request:
    paths-ignore:
      - '.github/*'
      - '.github/*_TEMPLATE/**'
      - '*.md'
  workflow_dispatch:

jobs:
  build:
    name: .NET on ${{ matrix.runs-on }} (${{ matrix.configuration }})
    runs-on: ${{ matrix.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        runs-on: [macos-latest, macos-14, ubuntu-latest, windows-latest]
        configuration: [Release, Debug]
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
    steps:
      - uses: actions/checkout@v5

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v5

      - name: Build
        run: dotnet publish DepotDownloader/DepotDownloader.csproj -c ${{ matrix.configuration }} -o artifacts /p:ContinuousIntegrationBuild=true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        if: matrix.configuration == 'Release' && matrix.runs-on == 'windows-latest'
        with:
          name: DepotDownloader-framework
          path: artifacts
          if-no-files-found: error

      - name: Publish Windows-x64
        if: matrix.configuration == 'Release' && matrix.runs-on == 'windows-latest'
        run: dotnet publish DepotDownloader/DepotDownloader.csproj --configuration Release -p:PublishSingleFile=true -p:DebugType=embedded --self-contained --runtime win-x64 --output selfcontained-win-x64

      - name: Publish Windows-arm64
        if: matrix.configuration == 'Release' && matrix.runs-on == 'windows-latest'
        run: dotnet publish DepotDownloader/DepotDownloader.csproj --configuration Release -p:PublishSingleFile=true -p:DebugType=embedded --self-contained --runtime win-arm64 --output selfcontained-win-arm64

      - name: Publish Linux-x64
        if: matrix.configuration == 'Release' && matrix.runs-on == 'ubuntu-latest'
        run: dotnet publish DepotDownloader/DepotDownloader.csproj --configuration Release -p:PublishSingleFile=true -p:DebugType=embedded --self-contained --runtime linux-x64 --output selfcontained-linux-x64

      - name: Publish Linux-arm
        if: matrix.configuration == 'Release' && matrix.runs-on == 'ubuntu-latest'
        run: dotnet publish DepotDownloader/DepotDownloader.csproj --configuration Release -p:PublishSingleFile=true -p:DebugType=embedded --self-contained --runtime linux-arm --output selfcontained-linux-arm

      - name: Publish Linux-arm64
        if: matrix.configuration == 'Release' && matrix.runs-on == 'ubuntu-latest'
        run: dotnet publish DepotDownloader/DepotDownloader.csproj --configuration Release -p:PublishSingleFile=true -p:DebugType=embedded --self-contained --runtime linux-arm64 --output selfcontained-linux-arm64

      - name: Publish macOS-x64
        if: matrix.configuration == 'Release' && matrix.runs-on == 'macos-latest'
        run: dotnet publish DepotDownloader/DepotDownloader.csproj --configuration Release -p:PublishSingleFile=true -p:DebugType=embedded --self-contained --runtime osx-x64 --output selfcontained-osx-x64

      - name: Publish macOS-arm64
        if: matrix.configuration == 'Release' && matrix.runs-on == 'macos-14'
        run: dotnet publish DepotDownloader/DepotDownloader.csproj --configuration Release -p:PublishSingleFile=true -p:DebugType=embedded --self-contained --runtime osx-arm64 --output selfcontained-osx-arm64

      - name: Upload Windows-x64
        uses: actions/upload-artifact@v4
        if: matrix.configuration == 'Release' && matrix.runs-on == 'windows-latest'
        with:
          name: DepotDownloader-windows-x64
          path: selfcontained-win-x64
          if-no-files-found: error

      - name: Upload Windows-arm64
        uses: actions/upload-artifact@v4
        if: matrix.configuration == 'Release' && matrix.runs-on == 'windows-latest'
        with:
          name: DepotDownloader-windows-arm64
          path: selfcontained-win-arm64
          if-no-files-found: error

      - name: Upload Linux-x64
        uses: actions/upload-artifact@v4
        if: matrix.configuration == 'Release' && matrix.runs-on == 'ubuntu-latest'
        with:
          name: DepotDownloader-linux-x64
          path: selfcontained-linux-x64
          if-no-files-found: error

      - name: Upload Linux-arm
        uses: actions/upload-artifact@v4
        if: matrix.configuration == 'Release' && matrix.runs-on == 'ubuntu-latest'
        with:
          name: DepotDownloader-linux-arm
          path: selfcontained-linux-arm
          if-no-files-found: error

      - name: Upload Linux-arm64
        uses: actions/upload-artifact@v4
        if: matrix.configuration == 'Release' && matrix.runs-on == 'ubuntu-latest'
        with:
          name: DepotDownloader-linux-arm64
          path: selfcontained-linux-arm64
          if-no-files-found: error

      - name: Upload macOS-x64
        uses: actions/upload-artifact@v4
        if: matrix.configuration == 'Release' && matrix.runs-on == 'macos-latest'
        with:
          name: DepotDownloader-macos-x64
          path: selfcontained-osx-x64
          if-no-files-found: error

      - name: Upload macOS-arm64
        uses: actions/upload-artifact@v4
        if: matrix.configuration == 'Release' && matrix.runs-on == 'macos-14'
        with:
          name: DepotDownloader-macos-arm64
          path: selfcontained-osx-arm64
          if-no-files-found: error

  build-nixos:
    name: Build for NixOS
    runs-on: ubuntu-latest
    container:
      image: nixos/nix:latest
    strategy:
      matrix:
        configuration: [Release]
    steps:
      - uses: actions/checkout@v5

      - name: Setup Nix environment
        run: |
          # Enable flakes and nix-command
          echo "experimental-features = nix-command flakes" >> /etc/nix/nix.conf
          
          # Update channel and install required packages
          nix-channel --add https://nixos.org/channels/nixos-unstable nixpkgs
          nix-channel --update
          
          # Install .NET SDK and required tools
          nix-env -iA nixpkgs.dotnet-sdk_8 nixpkgs.icu nixpkgs.openssl

      - name: Build NixOS x64
        run: |
          export DOTNET_ROOT=$(nix-build '<nixpkgs>' -A dotnet-sdk_8)/
          export PATH="$DOTNET_ROOT:$PATH"
          export DOTNET_CLI_TELEMETRY_OPTOUT=1
          
          # Build for linux-x64 in NixOS environment
          dotnet publish DepotDownloader/DepotDownloader.csproj \
            --configuration ${{ matrix.configuration }} \
            -p:PublishSingleFile=true \
            -p:DebugType=embedded \
            -p:PublishReadyToRun=false \
            --self-contained \
            --runtime linux-x64 \
            --output nixos-x64

      - name: Create NixOS package structure
        run: |
          # Create a proper NixOS-compatible directory structure
          mkdir -p nixos-release/nixos-x64
          cp nixos-x64/DepotDownloader nixos-release/nixos-x64/
          chmod +x nixos-release/nixos-x64/DepotDownloader
          
          # Create a shell wrapper that uses nix-shell for compatibility
          cat > nixos-release/nixos-x64/depot-downloader-nix << 'EOF'
          #!/usr/bin/env bash
          # NixOS wrapper for DepotDownloader
          # This ensures the binary runs with proper NixOS environment
          
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          
          # Try different methods to run the binary
          if command -v nix-shell >/dev/null 2>&1; then
              # Method 1: Use nix-shell with required dependencies
              exec nix-shell -p glibc stdenv.cc.cc.lib icu openssl --run "$SCRIPT_DIR/DepotDownloader \"\$@\""
          elif [ -f "/run/current-system/sw/bin/nix-shell" ]; then
              # Method 2: System nix-shell
              exec /run/current-system/sw/bin/nix-shell -p glibc stdenv.cc.cc.lib icu openssl --run "$SCRIPT_DIR/DepotDownloader \"\$@\""
          else
              # Method 3: Direct execution (might work if system is configured properly)
              exec "$SCRIPT_DIR/DepotDownloader" "$@"
          fi
          EOF
          
          chmod +x nixos-release/nixos-x64/depot-downloader-nix
          
          # Create README with NixOS-specific instructions
          cat > nixos-release/nixos-x64/README-NixOS.md << 'EOF'
          # DepotDownloader for NixOS
          
          This build was compiled natively on NixOS and should work better with NixOS systems.
          
          ## Usage:
          
          ### Method 1: Using the Nix wrapper (Recommended)
          ```bash
          ./depot-downloader-nix [arguments]
          ```
          
          ### Method 2: Direct execution (if your system is properly configured)
          ```bash
          ./DepotDownloader [arguments]
          ```
          
          ### Method 3: Using nix-shell manually
          ```bash
          nix-shell -p glibc stdenv.cc.cc.lib icu openssl --run './DepotDownloader [arguments]'
          ```
          
          ### Method 4: Using steam-run (if available)
          ```bash
          steam-run ./DepotDownloader [arguments]
          ```
          
          ## Installation in NixOS
          
          You can also create a proper Nix derivation for this. Add this to your configuration:
          
          ```nix
          environment.systemPackages = with pkgs; [
            (stdenv.mkDerivation {
              name = "depotdownloader";
              src = ./.;
              buildInputs = [ glibc stdenv.cc.cc.lib icu openssl ];
              installPhase = ''
                mkdir -p $out/bin
                cp DepotDownloader $out/bin/
                chmod +x $out/bin/DepotDownloader
              '';
            })
          ];
          ```
          
          ## Troubleshooting
          
          If you encounter issues:
          1. Make sure you have the Nix package manager installed
          2. Try the nix-shell method which provides all required dependencies
          3. Check that your NixOS system has the necessary channels updated
          
          For more help, see: https://nix.dev/
          EOF

      - name: Upload NixOS x64
        uses: actions/upload-artifact@v4
        with:
          name: DepotDownloader-nixos-x64
          path: nixos-release/nixos-x64
          if-no-files-found: error

  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [build, build-nixos]
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Display artifacts folder structure
      run: ls -Rl
      working-directory: artifacts

    - name: Create release files
      run: |
        set -eux
        mkdir release
        chmod +x artifacts/DepotDownloader-linux-x64/DepotDownloader
        chmod +x artifacts/DepotDownloader-linux-arm/DepotDownloader
        chmod +x artifacts/DepotDownloader-linux-arm64/DepotDownloader
        chmod +x artifacts/DepotDownloader-nixos-x64/DepotDownloader
        chmod +x artifacts/DepotDownloader-nixos-x64/depot-downloader-nix
        chmod +x artifacts/DepotDownloader-macos-x64/DepotDownloader
        chmod +x artifacts/DepotDownloader-macos-arm64/DepotDownloader
        zip -9j release/DepotDownloader-framework.zip artifacts/DepotDownloader-framework/*
        zip -9j release/DepotDownloader-windows-x64.zip artifacts/DepotDownloader-windows-x64/*
        zip -9j release/DepotDownloader-windows-arm64.zip artifacts/DepotDownloader-windows-arm64/*
        zip -9j release/DepotDownloader-linux-x64.zip artifacts/DepotDownloader-linux-x64/*
        zip -9j release/DepotDownloader-linux-arm.zip artifacts/DepotDownloader-linux-arm/*
        zip -9j release/DepotDownloader-linux-arm64.zip artifacts/DepotDownloader-linux-arm64/*
        zip -9r release/DepotDownloader-nixos-x64.zip artifacts/DepotDownloader-nixos-x64/*
        zip -9j release/DepotDownloader-macos-x64.zip artifacts/DepotDownloader-macos-x64/*
        zip -9j release/DepotDownloader-macos-arm64.zip artifacts/DepotDownloader-macos-arm64/*

    - name: Display structure of archived files
      run: ls -Rl
      working-directory: release

    - name: Release
      uses: softprops/action-gh-release@v2
      with:
        draft: true
        files: release/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
